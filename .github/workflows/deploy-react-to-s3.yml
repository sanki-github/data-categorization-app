name: Build and deploy React to S3

on:
  push:
    branches: [ main, master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: frontend-react
        run: npm ci

      - name: Build
        working-directory: frontend-react
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create S3 stack if bucket not provided
        if: ${{ secrets.S3_BUCKET == '' }}
        id: create_stack
        run: |
          STACK_NAME=data-categorization-frontend
          aws cloudformation deploy --template-file infra/s3-website.yml --stack-name $STACK_NAME --capabilities CAPABILITY_IAM
          BUCKET=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='BucketName'].OutputValue" --output text)
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT

      - name: Resolve S3 bucket name
        id: resolve_bucket
        run: |
          if [ -n "${{ secrets.S3_BUCKET }}" ]; then
            echo "bucket=${{ secrets.S3_BUCKET }}" >> $GITHUB_OUTPUT
          else
            echo "bucket=${{ steps.create_stack.outputs.bucket }}" >> $GITHUB_OUTPUT
          fi

      - name: Build (with API base)
        working-directory: frontend-react
        env:
          VITE_API_BASE: ${{ secrets.VITE_API_BASE || '' }}
        run: npm run build

      - name: Sync to S3
        run: |
          aws s3 sync frontend-react/dist s3://${{ steps.resolve_bucket.outputs.bucket }} --delete --acl public-read

      - name: Invalidate CloudFront (optional)
        if: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths '/*'
